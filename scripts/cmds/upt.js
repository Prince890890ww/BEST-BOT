const os = require("os");

module.exports = {
  config: {
    name: "uptime",
    aliases: ["up", "upt"],
    version: "2.1",
    author: "Siam",
    longDescription: "uptime checker",
    category: "Utility",
    guide: {
      en: "{pn}",
    },
  },

  onStart: async function ({ api, message, event }) {
    try {
      const uptimeInSeconds = process.uptime();

      const days = Math.floor(uptimeInSeconds / 86400);
      const hours = Math.floor((uptimeInSeconds % 86400) / 3600);
      const minutes = Math.floor((uptimeInSeconds % 3600) / 60);

      const uptimeString = `${days} days, ${hours} hours, ${minutes} minutes`;

      const pingStart = Date.now();
      await api.sendMessage({ body: "Monitor up....." }, event.threadID);
      const pingEnd = Date.now();
      const ping = Math.floor((pingEnd - pingStart) / 10); 

      const isStable = ping < 110;  

      const memoryUsage = (os.totalmem() - os.freemem()) / (1024 ** 2); 

      let statusMessage = "ржмржЯ ржЪрж▓ржЫрзЗ ржжрзНрж░рзБржд ржЧрждрж┐рждрзЗ ЁЯЪА";
      if (!isStable) {
        statusMessage = "ржмржЯ ржнрж╛рж▓рзЛ ржкржЬрж┐рж╕ржирзЗ ржЖржЫрзЗЁЯеЗ";
      }

      let uptimeGreeting = "Greetings!"; 
      if (days > 5) {
        uptimeGreeting = "Vps using this bot";
      } else if (days > 2) {
        uptimeGreeting = "ржЗржЮрзНржЬрзЯ ржмржЯ ржЦрзБржм ржнрж╛рж▓рзЛ ржХрж╛ржЬ ржХрж░ржЫрзЗЁЯОЗ";
      } else if (days > 1 || (days === 1 && hours >= 1)) {
        uptimeGreeting = "Good to see you! The bot has been active for over a day!";
      } else if (hours >= 12) {
        uptimeGreeting = "ржмржЯ ржЯрж┐ рззрзи ржШржирзНржЯрж╛ рж▓рж╛ржЗржирзЗ ржЖржЫрзЗ ржЕржнрж┐ржиржирзНржжржи ЁЯОЗЁЯОЗ";
      } else if (hours >= 6) {
        uptimeGreeting = "Half a day in, and the bot is rocking it!";
      } else if (hours >= 3) {
        uptimeGreeting = "рзй ржШржирзНржЯрж╛ ржкрзЗрж░рж┐рзЯрзЗ ржЧрзЗрж▓рзЛ рзирзк ржШржирзНржЯрж╛ ржЯрж╛ржирж╛ ржЪрж▓ржмрзЗ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣ЁЯОИ";
      } else if (hours >= 1) {
        uptimeGreeting = "ржЕржнрж┐ржиржирзНржжржи ржмржЯ рзз ржШржирзНржЯрж╛ ржкрзЗрж░рж┐рзЯрзЗ ржЧрзЗрж▓рзЛ ЁЯОЖ";
      } else if (minutes > 30) {
        uptimeGreeting = "ржЕрж░рзНржзрзЗржХ ржШржирзНржЯрж╛ рж╣рзЛрзЯрзЗ ржЧрзЗрж▓рзЛ ржмржЯ ржПржЦржирзЛ рж╕ржХрзНрж░рж┐ржУ";
      } else if (minutes > 15) {
        uptimeGreeting = "рззрзл ржорж┐ржирж┐ржЯ ржПрж░ ржЙржкрж░рзЗ ржмржЯ рж▓рж╛ржЗржирзЗ ржЖржЫрзЗ| ржмржЯрзирзк ржШржирзНржЯрж╛ рж╕рж╛рж░рзНржнрж┐рж╕ ржжрж┐рждрзЗ ржкрзНрж░рж╕рзНрждрзБржд";
      } else if (minutes > 5) {
        uptimeGreeting = "ржмржЯ ржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ ржЖрж╢рж╛ ржХрж░рж┐ рзирзк ржЧржирзНржЯрж╛ ржЪрж▓ржмрзЗ ржЗржирж╢рж╛ржЖрж▓рзНрж▓рж╛рж╣тЭгя╕П";
      } else if (minutes > 1) {
        uptimeGreeting = "One minute down, and the bot is just getting started!";
      } else {
        uptimeGreeting = "ржПржЗ ржмржЯ ржЕржирзЗржХ рж╕ржЯрзНрж░ржВ!";
      }

      const additionalMessages = [
        "рждрзЛржорж╛рж░ ржмржЯ ржирж┐рзЯрзЗ рж╕рзБржирзНржжрж░ ржорзБрж╣рзБрж░рзНржд ржХрж╛ржЯрж╛ржУтШ║я╕П!",
        "ржирждрзБржи ржХрж┐ржЫрзБ ржкрзЗрждрзЗ ржЖржорж╛ржХрзЗ ржЕржирзБрж╕рж░ржи ржХрж░рзБржиЁЯла",
        "ржЖржорж╛рж░ ржжрж╛рж░рж╛рзЯ ржЖржкржирж┐ рж╕рзБржирзНржжрж░ ржорзБрж╣рзБрж░рзНржд ржХрж╛ржЯрж╛ржитШ║я╕П",
        "рждрзБржорж┐ ржХрж┐ ржЬрж╛ржирзЛ ржЖржорж┐ ржХрзЛржбрж┐ржВ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐",
        "ржзржирзНржпржмрж╛ржж ржЖржорж╛ржХрзЗ ржЕржирзБрж╕рж░ржи ржХрж░рж╛рж░ ржЬржирзНржпЁЯОБ",
        "ржХржорж╛ржирзНржб ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж┐ ржкрзНрж░рж╕рзНрждрзБржд?",
        "ржмржЯрзЗрж░ рж╣рж╛рж╕рзНржпржХрж░ ржжрж┐ржХ-ржЖржорж┐ ржоржЬрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ЁЯОЧя╕П",
        "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
      ];

      const randomAdditionalMessage = additionalMessages[Math.floor(Math.random() * additionalMessages.length)];

      const replyMessage = `ЁЯзд Uptime: ${uptimeString}\nЁЯУг Status: ${statusMessage}\n├Ч Ping: ${ping}ms\nтАвтАв Memory Usage: ${memoryUsage.toFixed(2)} MB\n\n${uptimeGreeting}\n\nЁЯМЯ ${randomAdditionalMessage}`;

      message.reply(replyMessage);
    } catch (error) {
      console.error(error);
      message.reply("Error getting uptime and ping.");
    }
  },
};